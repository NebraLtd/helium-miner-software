name: Build and Preload OpenFleet

on:
  repository_dispatch:
    types: [build-open-fleet]
  workflow_dispatch:

env:
  balena-cli: v15.0.3
  raspberrypi3-64: 2.108.27
  raspberrypi4-64: 2.108.27
  raspberrypicm4-ioboard: 2.112.12
  rockpi-4b-rk3399: 2.108.25+rev1

jobs:
  build-open-fleet:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
        with: 
          ref: master

      - name: Determine if Raspberry Pi 3
        run: |
          repo="${{ github.event.repository.name }}"

          if grep -q "-rockpi" <<<"$repo"; then
            echo "Not RasPi 3"
            RASPI3="NO"
            ROCKPI="YES"
          elif grep -q "outdoor" <<<"$repo"; then
            echo "RasPi Outdoor"
            RASPI3="YES"
            ROCKPI="NO"
          elif grep -q "indoor" <<<"$repo"; then
            echo "RasPi Indoor"
            RASPI3="YES"
            ROCKPI="NO"
          elif grep -q "risinghf" <<<"$repo"; then
            echo "RisingHF"
            RASPI3="YES"
            ROCKPI="NO"
          else
            echo "Not RasPi 3"
            RASPI3="NO"
            ROCKPI="NO"
          fi

          echo "RASPI3=$RASPI3" >> $GITHUB_ENV
          echo "ROCKPI=$ROCKPI" >> $GITHUB_ENV

      - name: Random sleep (balena API workaround)
        run:  sleep $[ ( $RANDOM % 540 ) + 1 ]s

      - name: Install latest balena-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip zip
          cd /opt/
          echo "Uses Balena CLI version: ${{ env.balena-cli }}"
          curl -O -sSL "https://github.com/balena-io/balena-cli/releases/download/${{ env.balena-cli }}/balena-cli-${{ env.balena-cli }}-linux-x64-standalone.zip"
          unzip balena-cli-*-linux-x64-standalone.zip
          sudo ln -s /opt/balena-cli/balena /usr/bin/
          cd ~

      - name: Balena login
        run: |
          if [ ${{ env.RASPI3 }} == 'YES' ] ; then
            balena login --token ${{ secrets.BALENA_API_TOKEN }} > /dev/null
          elif [ ${{ github.event.repository.name }} == 'helium-syncrobit' ] || [ ${{ github.event.repository.name }} == 'helium-linxdot' ] || [ ${{ github.event.repository.name }} == 'helium-pycom' ] || [ ${{ github.event.repository.name }} == 'helium-midas' ] ; then
            balena login --token ${{ secrets.BALENA_API_TOKEN_2 }} > /dev/null
          elif [ ${{ env.ROCKPI }} == 'YES' ] ; then
            balena login --token ${{ secrets.BALENA_API_TOKEN_3 }} > /dev/null
          else
            balena login --token ${{ secrets.BALENA_API_TOKEN_4 }} > /dev/null
          fi

      - name: Generate a Balena OS image for the given board, variant, frequency
        run: |
          LATEST_GA=${{ github.event.client_payload.tag }}
          if [ $LATEST_GA != "" ] ; then
            echo "New release pushed to main repo: $LATEST_GA"
            echo "LATEST_GA=$LATEST_GA" >> $GITHUB_ENV
          else
            echo "No release version provided! Applying tag TEST"
            echo "LATEST_GA=TEST" >> $GITHUB_ENV
          fi

          IMAGE_BASE_PATH="$HOME/images"
          DATE=$(date +%F)
          USER=""
          NODRYRUN=true
          VERBOSE=true     

          # Make the base path for the generated images.
          mkdir -p "$IMAGE_BASE_PATH"

          # Print the parameters for generating images.

          if [[ $USER != "" ]]; then
            echo " - user: ${USER}"
          fi

          if [[ $NODRYRUN == false ]]; then
            echo "(Dryrun mode enabled)"
          fi

          if $VERBOSE ; then
            echo "(Verbose mode enabled)"
          fi
          
          # Download balena OS
          
          if [ ${{ env.RASPI3 }} == 'YES' ] ; then
            balena_os="raspberrypi3-64"
            balena_os_version="${{ env.raspberrypi3-64 }}"
          elif [ ${{ github.event.repository.name }} == 'helium-syncrobit' ] || [ ${{ github.event.repository.name }} == 'helium-linxdot' ] || [ ${{ github.event.repository.name }} == 'helium-pycom' ] || [ ${{ github.event.repository.name }} == 'helium-midas' ] ; then
            balena_os="raspberrypicm4-ioboard"
            balena_os_version="${{ env.raspberrypicm4-ioboard }}"
          elif [ ${{ env.ROCKPI }} == 'YES' ] ; then
            balena_os="rockpi-4b-rk3399"
            balena_os_version="${{ env.rockpi-4b-rk3399 }}"
          else
            balena_os="raspberrypi4-64"
            balena_os_version="${{ env.raspberrypi4-64 }}"
          fi

          base_image_path="$IMAGE_BASE_PATH/balena-base-${{ github.event.repository.name }}.img"

          if $VERBOSE ; then
            echo -e "Downloading image ${balena_os} for version ${balena_os_version} and writing to ${base_image_path}"
          fi

          if $NODRYRUN ; then
            # Download the base image
            balena os download "$balena_os" \
              -o "$base_image_path" \
              --version "$balena_os_version"
          fi
    
          # Generate image path for the given board, variant, frequency and user

          fleet_name="${{ github.event.repository.name }}"
          image_name="${fleet_name}-${DATE}"
          image_path="${IMAGE_BASE_PATH}/${image_name}.img"

          # Minimum output
          echo "Generating image for ${fleet_name} fleet"

          if $VERBOSE ; then
            echo "Image path is ${image_path}"
          fi

          # Configure balena OS image

          if $VERBOSE ; then
            echo "Configuring image"
          fi

          # Copy base balena image to target image
          if $NODRYRUN ; then
            cp "$base_image_path" "$image_path"
          fi

          if $NODRYRUN ; then
            balena os configure "$image_path" \
              --fleet "nebraltd/$fleet_name" \
              --config-network ethernet \
              --version "$balena_os_version"
          fi

          if $VERBOSE ; then
            echo "Pre-loading apps"
          fi

          # Preload balena OS image

          if $NODRYRUN ; then
            balena preload "$image_path" \
              --pin-device-to-release \
              --fleet "nebraltd/$fleet_name" \
              -c "current"
          fi

          # Copy configuration files into boot and root partition of the balena image

          if $VERBOSE ; then
            echo "Copying configuration files..."
          fi

          if $NODRYRUN ; then
            if [ -f "./config.txt" ] ; then
              echo "Config.txt file found..."
              mountpoints=/tmp/balena-image-mountpoints
              balena_image_boot_mnt=${mountpoints}/resin-boot

              # Setup mountpoints
              sudo rm -rf $mountpoints > /dev/null 2>&1 || true
              sudo mkdir -p $balena_image_boot_mnt

              balena_image_loop_dev="$(sudo losetup -fP --show "$image_path")"

              sudo mount "${balena_image_loop_dev}p1" "$balena_image_boot_mnt"
              sudo cp "./config.txt" "$balena_image_boot_mnt/config.txt"

              sleep 5  # Waits 5 seconds.
            
              # Cleanup
              sudo umount "$balena_image_boot_mnt"
              sudo losetup -d "$balena_image_loop_dev"
            else
              echo "Config.txt file not found..."
            fi
          fi

          # Compress Balena image file and generate SHA512 checksum file
          # Make the compressed file name from the image file name

          compressed_image_path=${image_path/img/zip}

          if $VERBOSE ; then
            echo "Compressing image"
          fi

          if $NODRYRUN ; then
            zip -9 -j "$compressed_image_path" "$image_path"
          fi

          if $VERBOSE ; then
            echo "Generating checkum"
          fi

          if $NODRYRUN ; then
            sha512sum "$compressed_image_path" > "$compressed_image_path.sha512"
          fi

          # Export image name and compressed image path to the environment
          export IMAGE_NAME="$image_name"
          export COMPRESSED_IMAGE_PATH="$compressed_image_path"

          echo "Image Name: ${IMAGE_NAME}"
          echo "Compressed Image Path: ${COMPRESSED_IMAGE_PATH}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "COMPRESSED_IMAGE_PATH=${COMPRESSED_IMAGE_PATH}" >> $GITHUB_ENV

      - name: Set date
        run: |
          echo "timestamp=$(date +'%s')" >> $GITHUB_ENV
          echo "day=$(date +'%F')" >> $GITHUB_ENV

      - name: Copy OS image file and checksum to final location
        run: |
          cp "${{ env.COMPRESSED_IMAGE_PATH }}" "${{ env.IMAGE_NAME }}.zip"
          cp "${{ env.COMPRESSED_IMAGE_PATH }}.sha512" "${{ env.IMAGE_NAME }}.zip.sha512"          

      - name: Upload image file and checksum to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.IMAGE_NAME }}.*
          tag: ${{ env.LATEST_GA }}-${{ env.IMAGE_NAME }}-OpenFleet
          overwrite: true
          file_glob: true
