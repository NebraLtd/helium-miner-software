name: BalenaCloud Deploy (Production)

on:
  push:
    # Only run workflow for pushes to specific branches
    branches:
      - production

jobs:
  build-prod:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sbc: [raspi, rockpi, rak, pisces, og, sensecap, finestra, controllino, cotx, pantherx1, linxdot, linxdot-rkcm3, pycom, syncrobit, syncrobit-rkcm3, risinghf]
        frequency: [470, 868, 915]
        variant: [indoor, outdoor]
        exclude:
          - sbc: rak
          - sbc: pisces
          - sbc: og
          - sbc: sensecap
          - sbc: finestra
          - sbc: controllino
          - sbc: cotx
          - sbc: pantherx1
          - sbc: linxdot
          - sbc: linxdot-rkcm3
          - sbc: syncrobit
          - sbc: syncrobit-rkcm3
          - sbc: pycom
          - sbc: risinghf
        include:
          - sbc: pisces
            variant: indoor
            frequency: 868
          - sbc: rak
            variant: indoor
            frequency: 868
          - sbc: og
            variant: indoor
            frequency: 868
          - sbc: sensecap
            variant: indoor
            frequency: 868
          - sbc: finestra
            variant: indoor
            frequency: 868
          - sbc: controllino
            variant: indoor
            frequency: 868
          - sbc: cotx
            variant: indoor
            frequency: 868
          - sbc: pantherx1
            variant: indoor
            frequency: 868
          - sbc: linxdot
            variant: indoor
            frequency: 868
          - sbc: linxdot-rkcm3
            variant: indoor
            frequency: 868
          - sbc: syncrobit
            variant: indoor
            frequency: 868
          - sbc: syncrobit-rkcm3
            variant: indoor
            frequency: 868
          - sbc: pycom
            variant: indoor
            frequency: 868
          - sbc: risinghf
            variant: indoor
            frequency: 868
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: production
      - name: Export short SHA of current commit
        shell: bash
        run: |
          FIRMWARE_SHORT_HASH=$( echo ${GITHUB_SHA:0:7} )
          echo "FIRMWARE_SHORT_HASH=$FIRMWARE_SHORT_HASH" >> $GITHUB_ENV
          
          # Get the latest GA release and branch
          source <(grep FIRMWARE_VERSION settings.ini)
          LATEST_GA=$FIRMWARE_VERSION
          GITHUB_BRANCH=$( echo "${{ github.ref }}" | sed 's/refs\/heads\///g' )
          
          echo "LATEST_GA=$LATEST_GA" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=$GITHUB_BRANCH" >> $GITHUB_ENV
      - name: Random sleep (balena API workaround)
        run:  sleep $[ ( $RANDOM % 540 ) + 1 ]s
      - name: Generate Docker Compose for ROCK Pi
        if: matrix.sbc == 'rockpi'
        run: |
          python gen_docker_compose.py rockpi -o docker-compose.yml
          ROCKPI="-rockpi"
          echo "ROCKPI=$ROCKPI" >> $GITHUB_ENV
          cp balena/balena.yml.${{ matrix.sbc }}-${{ matrix.variant }} balena.yml
      - name: Generate Docker Compose for Nebra RasPi
        if: matrix.sbc == 'raspi'
        run: |
          python gen_docker_compose.py rpi -o docker-compose.yml
          cp balena/balena.yml.${{ matrix.sbc }}-${{ matrix.variant }} balena.yml
      - name: Generate Docker Compose for RAK and Non-Nebra RasPi
        if: matrix.sbc == 'rak' || matrix.sbc == 'og' || matrix.sbc == 'sensecap' || matrix.sbc == 'finestra' || matrix.sbc == 'controllino' || matrix.sbc == 'cotx' || matrix.sbc == 'pantherx1' || matrix.sbc == 'linxdot' || matrix.sbc == 'syncrobit' || matrix.sbc == 'risinghf'
        run: |
          python gen_docker_compose.py rpi -o docker-compose.yml
          cp balena/balena.yml.${{ matrix.sbc }} balena.yml
      - name: Generate Docker Compose for Non-Nebra ROCK Pi
        if: matrix.sbc == 'linxdot-rkcm3' || matrix.sbc == 'syncrobit-rkcm3'
        run: |
          python gen_docker_compose.py rockpi -o docker-compose.yml
          ROCKPI="-rockpi"
          echo "ROCKPI=$ROCKPI" >> $GITHUB_ENV
          cp balena/balena.yml.${{ matrix.sbc }} balena.yml
      - name: Generate Docker Compose for Pycom
        if: matrix.sbc == 'pycom'
        run: |
          python gen_docker_compose.py pycom -o docker-compose.yml
          cp balena/balena.yml.pycom balena.yml
      - name: Generate Docker Compose for Pisces
        if: matrix.sbc == 'pisces'
        run: |
          python gen_docker_compose.py pisces -o docker-compose.yml
          cp balena/balena.yml.pisces balena.yml
      - name: Balena Deploy (Nebra ROCK Pi)
        uses: nebraltd/balena-cli-action@v15.0.3
        if: matrix.sbc == 'rockpi' && success()
        with:
          balena_api_token: ${{secrets.BALENA_API_TOKEN}}
          balena_command: "deploy nebraltd/helium-${{ matrix.variant }}-${{ matrix.frequency }}${{ env.ROCKPI }} --debug --nocache --build"
      - name: Balena Deploy (Nebra RasPi)
        uses: nebraltd/balena-cli-action@v15.0.3
        if: matrix.sbc == 'raspi' && success()
        with:
          balena_api_token: ${{secrets.BALENA_API_TOKEN_1}}
          balena_command: "deploy nebraltd/helium-${{ matrix.variant }}-${{ matrix.frequency }} --debug --nocache --build"
      - name: Balena Deploy (RAK and Non-Nebra RasPi)
        uses: nebraltd/balena-cli-action@v15.0.3
        if: ( matrix.sbc == 'rak' || matrix.sbc == 'og' || matrix.sbc == 'sensecap' || matrix.sbc == 'finestra' || matrix.sbc == 'controllino' || matrix.sbc == 'cotx' || matrix.sbc == 'pantherx1' || matrix.sbc == 'linxdot' || matrix.sbc == 'syncrobit' || matrix.sbc == 'risinghf' ) && success()
        with:
          balena_api_token: ${{secrets.BALENA_API_TOKEN_2}}
          balena_command: "deploy nebraltd/helium-${{ matrix.sbc }} --debug --nocache --build"
      - name: Balena Deploy (Non-Nebra ROCK Pi)
        uses: nebraltd/balena-cli-action@v15.0.3
        if: ( matrix.sbc == 'linxdot-rkcm3' || matrix.sbc == 'syncrobit-rkcm3' ) && success()
        with:
          balena_api_token: ${{secrets.BALENA_API_TOKEN_3}}
          balena_command: "deploy nebraltd/helium-${{ matrix.sbc }} --debug --nocache --build"
      - name: Balena Deploy (Pycom CM4)
        uses: nebraltd/balena-cli-action@v15.0.3
        if: matrix.sbc == 'pycom' && success()
        with:
          balena_api_token: ${{secrets.BALENA_API_TOKEN_4}}
          balena_command: "deploy nebraltd/helium-${{ matrix.sbc }} --debug --nocache --build"
      - name: Balena Deploy (Pisces P100)
        uses: nebraltd/balena-cli-action@v15.0.3
        if: matrix.sbc == 'pisces' && success()
        with:
          balena_api_token: ${{secrets.BALENA_API_TOKEN_5}}
          balena_command: "deploy nebraltd/helium-${{ matrix.sbc }} --debug --nocache --build"
      - name: Trigger build action in helium-${{ matrix.sbc }} repo
        uses: peter-evans/repository-dispatch@v2
        if: ( matrix.sbc == 'rak' || matrix.sbc == 'pisces' || matrix.sbc == 'og' || matrix.sbc == 'sensecap' || matrix.sbc == 'finestra' || matrix.sbc == 'controllino' || matrix.sbc == 'cotx' || matrix.sbc == 'pantherx1' || matrix.sbc == 'linxdot' || matrix.sbc == 'linxdot-rkcm3' || matrix.sbc == 'syncrobit' || matrix.sbc == 'syncrobit-rkcm3' || matrix.sbc == 'pycom' || matrix.sbc == 'risinghf' ) && success()
        with:
          token: ${{ secrets.MR_BUMP }}
          event-type: build-open-fleet
          repository: NebraLtd/helium-${{ matrix.sbc }}
          client-payload: '{"release": "${{ env.LATEST_GA }}_GA", "tag": "${{ env.LATEST_GA }}"}'
      - name: Trigger build action in helium-${{ matrix.variant }}-${{ matrix.frequency }}${{ env.ROCKPI }} repo
        uses: peter-evans/repository-dispatch@v2
        if: ( matrix.sbc == 'raspi' || ( matrix.sbc == 'rockpi' && ( matrix.frequency != '470' || ( matrix.frequency == '868' && matrix.variant != 'outdoor' ) ) ) ) && success()
        with:
          token: ${{ secrets.MR_BUMP }}
          event-type: build-open-fleet
          repository: NebraLtd/helium-${{ matrix.variant }}-${{ matrix.frequency }}${{ env.ROCKPI }}
          client-payload: '{"release": "${{ env.LATEST_GA }}_GA", "tag": "${{ env.LATEST_GA }}"}'
