name: NebraOS Cloud Deploy (Production)

on:
  push:
    # Only run workflow for pushes to specific branches
    branches:
      - production

jobs:
  build-prod:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [nebra-indoor1, nebra-outdoor1, nebra-indoor2, nebra-outdoor2] # TODO add nebra-light2 later

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: production
          
      - name: Setup Python Libraries
        run: pip install -r requirements.txt
        
      - name: Export short SHA of current commit
        run: |
          FIRMWARE_SHORT_HASH=$( echo ${GITHUB_SHA:0:7} )
          echo "FIRMWARE_SHORT_HASH=$FIRMWARE_SHORT_HASH" >> $GITHUB_ENV
          
          # Get the latest GA release and branch
          source <(grep FIRMWARE_VERSION settings.ini)
          LATEST_GA=$FIRMWARE_VERSION
          GITHUB_BRANCH=$( echo "${{ github.ref }}" | sed 's/refs\/heads\///g' )
          
          echo "LATEST_GA=$LATEST_GA" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=$GITHUB_BRANCH" >> $GITHUB_ENV
          
      - name: Random sleep (balena API workaround)
        run:  sleep $[ ( $RANDOM % 540 ) + 1 ]s
        
      - name: Generate Docker Compose
        run: |
          repo="helium-${{matrix.variant}}"
          echo "REPO=$repo" >> $GITHUB_ENV
          echo "Repo: $repo"
          
          FIRMWARE_SHORT_HASH=${{ env.FIRMWARE_SHORT_HASH }}
          
          python gen_docker_compose_by_variant.py ${{matrix.variant}} -o docker-compose.yml
          
      - name: Balena Deploy
        uses: nebraltd/balena-cli-action@v15.1.1
        with:
          balena_api_token: ${{secrets.NEBRAOS_CLOUD_TOKEN}}
          nebraos_cloud: true
          balena_command: "deploy nebraltd/${{ env.REPO}} --debug --nocache --build"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: path/to/artifact/world.txt
    
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/mything
          asset_name: mything
          tag: ${{ github.ref }}
          overwrite: true
          body: "This is my release text"
        
      - name: Trigger build action in ${{ env.REPO }} repo
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.MR_BUMP }}
          event-type: build-open-fleet
          repository: NebraLtd/${{ env.REPO }}
          client-payload: '{"release": "${{ env.LATEST_GA }}_GA", "tag": "${{ env.LATEST_GA }}", "firmware": "${{ env.FIRMWARE_SHORT_HASH }}", "branch": "${{ env.GITHUB_BRANCH }}"}'
